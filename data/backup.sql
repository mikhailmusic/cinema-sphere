--
-- PostgreSQL database dump
--

-- Dumped from database version 17.2 (Debian 17.2-1.pgdg120+1)
-- Dumped by pg_dump version 17.2 (Debian 17.2-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: genres; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.genres (
    id integer NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE public.genres OWNER TO postgres;

--
-- Name: genres_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.genres ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.genres_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: halls; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.halls (
    id integer NOT NULL,
    seat_count integer NOT NULL,
    name character varying(100) NOT NULL
);


ALTER TABLE public.halls OWNER TO postgres;

--
-- Name: halls_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.halls ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.halls_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: languages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.languages (
    id integer NOT NULL,
    code character varying(10) NOT NULL,
    name character varying(50) NOT NULL
);


ALTER TABLE public.languages OWNER TO postgres;

--
-- Name: languages_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.languages ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.languages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: movies; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.movies (
    age_rating integer NOT NULL,
    duration integer NOT NULL,
    genre_id integer NOT NULL,
    id integer NOT NULL,
    language_id integer NOT NULL,
    release_year integer NOT NULL,
    director character varying(100),
    description text,
    image_key character varying(255) NOT NULL,
    movie_status character varying(255) NOT NULL,
    title character varying(255) NOT NULL,
    CONSTRAINT movies_movie_status_check CHECK (((movie_status)::text = ANY ((ARRAY['PLANNED'::character varying, 'ACTIVE'::character varying, 'ARCHIVED'::character varying, 'DELETED'::character varying])::text[])))
);


ALTER TABLE public.movies OWNER TO postgres;

--
-- Name: movies_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.movies ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.movies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: sessions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sessions (
    hall_id integer NOT NULL,
    id integer NOT NULL,
    movie_id integer NOT NULL,
    start_time timestamp(6) without time zone NOT NULL,
    status character varying(255) NOT NULL,
    CONSTRAINT sessions_status_check CHECK (((status)::text = ANY ((ARRAY['ACTIVE'::character varying, 'CANCELLED'::character varying, 'DELETED'::character varying])::text[])))
);


ALTER TABLE public.sessions OWNER TO postgres;

--
-- Name: sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.sessions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sessions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: genres; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.genres (id, name) FROM stdin;
1	Фантастика
2	Приключения
3	Семейный
4	Триллер
5	Драма
6	Комедия
7	Ужасы
8	Боевик
9	Мелодрама
10	Исторический
11	Биография
12	Фэнтези
\.


--
-- Data for Name: halls; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.halls (id, seat_count, name) FROM stdin;
1	120	Зал 1
2	80	Зал 2
4	40	VIP Зал
5	200	IMAX
6	50	Детский Зал
3	60	Зал 3
\.


--
-- Data for Name: languages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.languages (id, code, name) FROM stdin;
1	ru	Русский
2	en	Английский
3	fr	Французский
4	de	Немецкий
5	es	Испанский
6	it	Итальянский
7	ja	Японский
8	zh	Китайский
9	ko	Корейский
\.


--
-- Data for Name: movies; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.movies (age_rating, duration, genre_id, id, language_id, release_year, director, description, image_key, movie_status, title) FROM stdin;
16	104	6	2	1	2025	Иван Петухов	Вадим привык ездить и жить по навигатору. Жизнь Веры — одно большое приключение. Двум противоположностям предстоит проехать 1500 километров на обычном городском такси, увидеть пять живописных городов и испытать миллион эмоций на пути друг к другу.	8a6445d7-8705-4b15-9380-d69352bb9a42_-1487018032	ACTIVE	Туда
12	134	1	1	1	2025	Николай Лебедев	Российский ракетный подводный крейсер специального назначения бесследно исчезает во время секретной миссии в Гренландском море. На его поиски отправляется экипаж под командованием Виктора Воронина, чей старший брат командовал пропавшей субмариной.\nПеред моряками стоит задача любыми силами найти подлодку и не допустить, чтобы новое секретное оружие попало в руки врага. В это же время из-за геологических исследований на полярной станции в северных водах пробуждается Кракен — гигантское чудовище, способное сливаться с подводной тьмой, обладающее высоким интеллектом. Именно с ним предстоит столкнуться морякам, разыскивающим пропавшую подводную лодку.	575c6512-0549-4372-9c57-6af8fe32c351_-1487018032	ACTIVE	Кракен
12	82	1	4	1	2024	Шантель Мюррей	Тео - молодой тасманский тигр, которого считают последним представителем своего вида. Его детство прошло среди веселых кенгуру-рестлеров, которые нашли его еще младенцем с удивительным кристаллом на шее. Но однажды Тео начинают мучать странные видения о его таинственном прошлом и родной земле, которая нуждается в спасении. Вместе с новыми друзьями Тео отправляется в захватывающее приключение по Австралии, чтобы пройти через джунгли, пустыни и горы, найти свою настоящую семью и спасти родную землю от лап врага!	7c0c5f60-7eac-402f-9c5b-4b56fa315c15_-1487018032	ACTIVE	100% тигр
6	93	12	3	1	2025	Олег Асадулин	У замкнутого школьника Мирона нет друзей, родители постоянно ссорятся, а дедушка полностью погружен в свои дела. В школе над ним подшучивают и не хотят играть в баскетбол из-за его слухового аппарата.\nРодители решают отметить день рождения деда в деревне. Оказавшись в дедовом доме, Мирон начинает подозревать что-то неладное, и, пока дед привычно препирается с папой, а мама пытается нивелировать конфликт, Мирон обнаруживает в сарае огромное существо и сразу же чувствует в нём родственную душу. Это снежный человек Еня, который, как оказывается, ранен. Ему предстоит узнать, кому можно доверять, обрести новых друзей, пережить невероятные приключения, столкнуться с опасностью и, наконец, вернуться домой к своей семье.	ab5ec0df-c7b7-499c-8eba-3052383f6847_-1487018032	PLANNED	сНежный человек
6	93	6	5	1	2025	Александр Бабаев	Рома — типичный авантюрист, но многое в его жизни не складывается: развод, проблемы с бизнесом. От отчаяния и в надежде расплатиться с долгами он решается на обман и вписывает себя в завещание одинокого старика, соседа по даче. Рома даже не подозревает, что вместе с домом и участком получит… четырех живых гномов.\nНо вместо добродушных помощников он сталкивается с упрямыми, ворчливыми и не самыми приятными спутниками, которые к тому же не слишком ему доверяют. Гномы способны находить клады, но только ради благих дел — и Роме придется постараться, чтобы убедить их в своей «чистоте помыслов». Он готов помогать всем подряд, раздавать щедрые обещания и изображать заботливого человека — лишь бы заполучить главное сокровище.	1600b938-d259-4b98-bc27-4618a38a9d6f_-1487018032	ACTIVE	Сокровища гномов
18	125	8	7	1	2025	Лен Уайзман	Действие происходит параллельно с событиями фильма «Джон Уик 3». По сюжету профессиональная балерина Ева Макарро (Ана де Армас), одержимая идеей найти виновных в смерти родителей, вступает в группировку «Руска Рома». На пути к своей цели она встретит много противников и возможных сторонников, одним из которых станет Джон Уик — легендарный киллер, известный в преступном мире под псевдонимом Баба-яга.	91b78766-fb8f-452d-9848-ebb8b7a27dbb_-1487018032	PLANNED	Балерина
16	98	8	8	1	2025	Морган С. Далибер	Макс была многообещающей гонщицей, но решила завязать со спортом и нашла себе работу попроще. Судьба сводит девушку с отставным гонщиком, который помогает ей получить место в академии, готовящей лучших спортсменов мира. В школе Макс знакомится с Уиллом, и между ними мгновенно пробегает искра. Звание чемпиона «Формулы 1» никогда не было так близко, но вдруг на пути к титулу встает еще один неожиданный соперник — Уилл. Теперь Макс должна решить, что для нее важнее — любовь или победа.	745fc93c-2686-4379-a13f-63fadbdb6d25_-1487018032	ACTIVE	Быстрее ветра
6	87	6	6	1	2025	Артемий Драгунский	Лето — это маленькая жизнь, а для Дениса Кораблева еще и полная удивительных приключений. Его семья во главе с бабушкой отправляется на дачу провести три месяца каникул на свежем воздухе. Дениске предстоит завести новых друзей, впервые влюбиться и отправиться в захватывающее путешествие во имя этой самой любви.	778a9143-2413-4ffb-8542-3ce610b379ae_-1487018032	ARCHIVED	Денискины рассказы
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.sessions (hall_id, id, movie_id, start_time, status) FROM stdin;
1	2	1	2025-06-10 19:00:00	ACTIVE
1	3	1	2025-06-10 16:00:00	ACTIVE
2	4	1	2025-06-16 17:00:00	ACTIVE
1	5	1	2025-06-12 14:00:00	ACTIVE
1	1	1	2025-06-11 10:00:00	CANCELLED
2	6	2	2025-06-12 11:00:00	ACTIVE
2	7	2	2025-06-12 16:00:00	ACTIVE
1	8	2	2025-06-14 18:00:00	ACTIVE
5	9	7	2025-06-12 11:00:00	ACTIVE
5	10	7	2025-06-12 17:00:00	ACTIVE
5	11	7	2025-06-13 11:00:00	ACTIVE
3	12	3	2025-06-10 17:30:00	ACTIVE
3	13	3	2025-06-11 20:30:00	ACTIVE
2	14	3	2025-06-14 20:30:00	ACTIVE
3	15	4	2025-06-16 13:30:00	ACTIVE
1	16	8	2025-06-18 18:30:00	ACTIVE
3	17	8	2025-06-19 22:30:00	ACTIVE
4	18	8	2025-06-15 20:30:00	ACTIVE
6	19	6	2025-06-10 17:30:00	ACTIVE
6	20	6	2025-06-15 10:00:00	ACTIVE
6	21	6	2025-06-15 15:00:00	ACTIVE
3	22	5	2025-06-12 09:00:00	CANCELLED
4	23	5	2025-06-15 15:00:00	CANCELLED
4	24	5	2025-06-13 16:00:00	CANCELLED
3	25	7	2025-06-12 20:30:00	ACTIVE
\.


--
-- Name: genres_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.genres_id_seq', 1, false);


--
-- Name: halls_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.halls_id_seq', 1, false);


--
-- Name: languages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.languages_id_seq', 1, false);


--
-- Name: movies_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.movies_id_seq', 8, true);


--
-- Name: sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.sessions_id_seq', 25, true);


--
-- Name: genres genres_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genres
    ADD CONSTRAINT genres_name_key UNIQUE (name);


--
-- Name: genres genres_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.genres
    ADD CONSTRAINT genres_pkey PRIMARY KEY (id);


--
-- Name: halls halls_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.halls
    ADD CONSTRAINT halls_name_key UNIQUE (name);


--
-- Name: halls halls_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.halls
    ADD CONSTRAINT halls_pkey PRIMARY KEY (id);


--
-- Name: languages languages_code_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_code_key UNIQUE (code);


--
-- Name: languages languages_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_name_key UNIQUE (name);


--
-- Name: languages languages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.languages
    ADD CONSTRAINT languages_pkey PRIMARY KEY (id);


--
-- Name: movies movies_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movies
    ADD CONSTRAINT movies_pkey PRIMARY KEY (id);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: movies fk6twg1wl11hks1j8xespmv0se7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movies
    ADD CONSTRAINT fk6twg1wl11hks1j8xespmv0se7 FOREIGN KEY (language_id) REFERENCES public.languages(id);


--
-- Name: sessions fkcbrgca6k34wv4jr41ik2qdoaf; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sessions
    ADD CONSTRAINT fkcbrgca6k34wv4jr41ik2qdoaf FOREIGN KEY (hall_id) REFERENCES public.halls(id);


--
-- Name: sessions fkcjgs3ugow5xk78mt9lo5o1di6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sessions
    ADD CONSTRAINT fkcjgs3ugow5xk78mt9lo5o1di6 FOREIGN KEY (movie_id) REFERENCES public.movies(id);


--
-- Name: movies fkjp8fsy8a0kkmdi04i81v05c6a; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movies
    ADD CONSTRAINT fkjp8fsy8a0kkmdi04i81v05c6a FOREIGN KEY (genre_id) REFERENCES public.genres(id);


--
-- PostgreSQL database dump complete
--

